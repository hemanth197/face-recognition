{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ramya/Desktop/face_recognition/src/App.js\";\nimport React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport './App.css'; //You must add your own API key here from Clarifai.\n\nconst app = new Clarifai.App({\n  apiKey: '089516396d3846d3bc2ae61a72012c7b'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n      'c0c0ac362b03416da06ab3fa36fb58e3', this.state.input).then(response => {\n        console.log('hi', response);\n\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ramya/Desktop/face_recognition/src/App.js"],"names":["React","Component","Particles","Clarifai","FaceRecognition","Logo","ImageLinkForm","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","onButtonSubmit","imageUrl","state","models","predict","then","response","console","log","fetch","method","headers","body","JSON","stringify","id","user","json","count","Object","assign","entries","catch","err","render","isSignedIn","route"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAO,WAAP,C,CAEA;;AACA,MAAMC,GAAG,GAAG,IAAIJ,QAAQ,CAACK,GAAb,CAAiB;AAC5BC,EAAAA,MAAM,EAAE;AADoB,CAAjB,CAAZ;AAIA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,IADD;AAEPC,QAAAA,UAAU,EAAE;AAFL;AAFH;AADC;AADY,CAAzB;;AAYA,MAAMR,GAAN,SAAkBP,SAAlB,CAA4B;AAC1BgB,EAAAA,WAAW,GAAG;AACZ;;AADY,SASdC,qBATc,GASWC,IAAD,IAAU;AAChC,YAAMC,YAAY,GAAGD,IAAI,CAACE,OAAL,CAAa,CAAb,EAAgBF,IAAhB,CAAqBG,OAArB,CAA6B,CAA7B,EAAgCC,WAAhC,CAA4CC,YAAjE;AACA,YAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAd;AACA,YAAMC,KAAK,GAAGC,MAAM,CAACJ,KAAK,CAACG,KAAP,CAApB;AACA,YAAME,MAAM,GAAGD,MAAM,CAACJ,KAAK,CAACK,MAAP,CAArB;AACA,aAAO;AACLC,QAAAA,OAAO,EAAEX,YAAY,CAACY,QAAb,GAAwBJ,KAD5B;AAELK,QAAAA,MAAM,EAAEb,YAAY,CAACc,OAAb,GAAuBJ,MAF1B;AAGLK,QAAAA,QAAQ,EAAEP,KAAK,GAAIR,YAAY,CAACgB,SAAb,GAAyBR,KAHvC;AAILS,QAAAA,SAAS,EAAEP,MAAM,GAAIV,YAAY,CAACkB,UAAb,GAA0BR;AAJ1C,OAAP;AAMD,KApBa;;AAAA,SAsBdS,cAtBc,GAsBIC,GAAD,IAAS;AACxB,WAAKC,QAAL,CAAc;AAACD,QAAAA,GAAG,EAAEA;AAAN,OAAd;AACD,KAxBa;;AAAA,SA0BdE,aA1Bc,GA0BGC,KAAD,IAAW;AACzB,WAAKF,QAAL,CAAc;AAACG,QAAAA,KAAK,EAAED,KAAK,CAACE,MAAN,CAAahC;AAArB,OAAd;AACD,KA5Ba;;AAAA,SA8BdiC,cA9Bc,GA8BG,MAAM;AACrB,WAAKL,QAAL,CAAc;AAACM,QAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWJ;AAAtB,OAAd;AACArC,MAAAA,GAAG,CAAC0C,MAAJ,CACGC,OADH,EAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAXJ,EAYI,KAAKF,KAAL,CAAWJ,KAZf,EAaGO,IAbH,CAaQC,QAAQ,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,QAAlB;;AACA,YAAIA,QAAJ,EAAc;AACZG,UAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,YAAAA,MAAM,EAAE,KAD2B;AAEnCC,YAAAA,OAAO,EAAE;AAAC,8BAAgB;AAAjB,aAF0B;AAGnCC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,cAAAA,EAAE,EAAE,KAAKb,KAAL,CAAWc,IAAX,CAAgBD;AADD,aAAf;AAH6B,WAAhC,CAAL,CAOGV,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACW,IAAT,EAPpB,EAQGZ,IARH,CAQQa,KAAK,IAAI;AACb,iBAAKvB,QAAL,CAAcwB,MAAM,CAACC,MAAP,CAAc,KAAKlB,KAAL,CAAWc,IAAzB,EAA+B;AAAEK,cAAAA,OAAO,EAAEH;AAAX,aAA/B,CAAd;AACD,WAVH;AAYD;;AACD,aAAKzB,cAAL,CAAoB,KAAKrB,qBAAL,CAA2BkC,QAA3B,CAApB;AACD,OA9BH,EA+BGgB,KA/BH,CA+BSC,GAAG,IAAIhB,OAAO,CAACC,GAAR,CAAYe,GAAZ,CA/BhB;AAgCD,KAhEa;;AAEZ,SAAKrB,KAAL,GAAa;AACXJ,MAAAA,KAAK,EAAE,EADI;AAEXG,MAAAA,QAAQ,EAAE,EAFC;AAGXP,MAAAA,GAAG,EAAE;AAHM,KAAb;AAKD;;AA2DD8B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,UAAF;AAAcxB,MAAAA,QAAd;AAAwByB,MAAAA,KAAxB;AAA+BhC,MAAAA;AAA/B,QAAuC,KAAKQ,KAAlD;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACG,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,WAArB;AACC,QAAA,MAAM,EAAEtC;AADT;AAAA;AAAA;AAAA;AAAA,cADH,eAIE;AAAA,gCACM,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBADN,eAEM,QAAC,aAAD;AACE,UAAA,aAAa,EAAE,KAAKgC,aADtB;AAEE,UAAA,cAAc,EAAE,KAAKI;AAFvB;AAAA;AAAA;AAAA;AAAA,gBAFN,eAMM,QAAC,eAAD;AAAiB,UAAA,GAAG,EAAEN,GAAtB;AAA2B,UAAA,QAAQ,EAAEO;AAArC;AAAA;AAAA;AAAA;AAAA,gBANN;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AApFyB;;AAuF5B,eAAevC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport './App.css';\n\n//You must add your own API key here from Clarifai.\nconst app = new Clarifai.App({\n apiKey: '089516396d3846d3bc2ae61a72012c7b'\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models\n      .predict(\n        // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n        // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n        // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n        // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n        // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n        // so you would change from:\n        // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n        // to:\n        // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n        'c0c0ac362b03416da06ab3fa36fb58e3',\n        this.state.input)\n      .then(response => {\n        console.log('hi', response)\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count}))\n            })\n\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n         <Particles className='particles'\n          params={particlesOptions}\n        />\n        <div>\n              <Logo />\n              <ImageLinkForm\n                onInputChange={this.onInputChange}\n                onButtonSubmit={this.onButtonSubmit}\n              />\n              <FaceRecognition box={box} imageUrl={imageUrl} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}